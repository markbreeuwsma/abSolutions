// <auto-generated />
using System;
using DatabaseModel;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DatabaseModel.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20181108133839_InitialDatabase")]
    partial class InitialDatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DatabaseModel.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Addition");

                    b.Property<string>("City");

                    b.Property<string>("CountryId")
                        .HasMaxLength(2);

                    b.Property<int?>("DeliveryAddressContactId");

                    b.Property<int>("HouseNo");

                    b.Property<int?>("PostalAddressContactId");

                    b.Property<string>("State");

                    b.Property<string>("Street");

                    b.Property<int>("Type");

                    b.Property<int?>("VisitingAddressContactId");

                    b.Property<string>("ZipCode");

                    b.HasKey("AddressId");

                    b.HasIndex("CountryId");

                    b.HasIndex("DeliveryAddressContactId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("DatabaseModel.Blog", b =>
                {
                    b.Property<int>("BlogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("BlogId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("DateTime");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("Description")
                        .HasColumnType("nvarchar")
                        .HasMaxLength(80);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("BlogId");

                    b.HasIndex("Created", "BlogId")
                        .IsUnique();

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("DatabaseModel.Contact", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AlternativeLanguageId");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<string>("LanguageId");

                    b.Property<DateTime>("LastUpdated")
                        .ValueGeneratedOnUpdate();

                    b.Property<string>("LastUpdatedBy");

                    b.Property<string>("Name1");

                    b.Property<string>("Name2");

                    b.Property<string>("Name3");

                    b.Property<int>("PostalAddressId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("VisitingAddressId");

                    b.HasKey("ContactId");

                    b.HasIndex("PostalAddressId")
                        .IsUnique();

                    b.HasIndex("VisitingAddressId")
                        .IsUnique();

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("DatabaseModel.Country", b =>
                {
                    b.Property<string>("CountryId")
                        .HasMaxLength(2);

                    b.HasKey("CountryId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("DatabaseModel.CountryDescription", b =>
                {
                    b.Property<string>("CountryId")
                        .HasMaxLength(2);

                    b.Property<string>("LanguageId")
                        .HasMaxLength(3);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(80);

                    b.HasKey("CountryId", "LanguageId");

                    b.HasIndex("LanguageId", "CountryId")
                        .IsUnique();

                    b.ToTable("CountryDescriptions");
                });

            modelBuilder.Entity("DatabaseModel.Post", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BlogId");

                    b.Property<string>("Content");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<DateTime>("Posted");

                    b.Property<string>("PostedBy");

                    b.HasKey("PostId");

                    b.HasIndex("BlogId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("DatabaseModel.Address", b =>
                {
                    b.HasOne("DatabaseModel.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("DatabaseModel.Contact", "DeliveryAddressContact")
                        .WithMany("DeliveryAddresses")
                        .HasForeignKey("DeliveryAddressContactId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DatabaseModel.Contact", b =>
                {
                    b.HasOne("DatabaseModel.Address", "PostalAddress")
                        .WithOne("PostalAddressContact")
                        .HasForeignKey("DatabaseModel.Contact", "PostalAddressId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DatabaseModel.Address", "VisitingAddress")
                        .WithOne("VisitingAddressContact")
                        .HasForeignKey("DatabaseModel.Contact", "VisitingAddressId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DatabaseModel.CountryDescription", b =>
                {
                    b.HasOne("DatabaseModel.Country", "Country")
                        .WithMany("Descriptions")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DatabaseModel.Post", b =>
                {
                    b.HasOne("DatabaseModel.Blog", "Blog")
                        .WithMany("Posts")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
